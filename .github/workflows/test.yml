name: Release Testing

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Ansible + deps
        run: |
            pip install -r bootstrap-instances/requirements.txt

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.4

      - name: Terraform Format
        id: fmt
        run: cd terraform-release && terraform fmt -check

      - name: Terraform Init
        id: init
        run: cd terraform-release && terraform init

      - name: Terraform Validate
        id: validate
        run: cd terraform-release && terraform validate

      - name: Terraform Plan
        id: plan
        run: cd terraform-release && terraform plan
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_EU_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_EU_SECRET }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: cd terraform-release && terraform apply -auto-approve
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_EU_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_EU_SECRET }}
          AWS_DEFAULT_REGION: us-east-1
          TF_VAR_EU_OS_USERNAME: ${{ secrets.OS_EU_USERNAME }}
          TF_VAR_EU_OS_PASSWORD: ${{ secrets.OS_EU_PASSWORD }}
          TF_VAR_VSC_OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.OS_VSC_APPLICATION_CREDENTIAL_ID }}
          TF_VAR_VSC_OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_VSC_APPLICATION_CREDENTIAL_SECRET }}

      - name: Setup SSH Keys
        run: |
            cd bootstrap-instances;
            echo "${{ secrets.GAT_JETSTREAM }}" > id_rsa.key
            echo "${{ secrets.THE_ONE_KEY }}" > gat-one-key-to-rule-them-all

            chmod go-rwx gat-one-key-to-rule-them-all* id_rsa*

            for x in *.key; do
                ssh-keygen -y -f "$x" > "${x}.pub";
            done

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.THE_ONE_KEY }}
          known_hosts: "github.com,192.30.253.112 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
          config: |
                Host gat-*training.galaxyproject.eu
                    User ubuntu
                    UserKnownHostsFile /dev/null
                    StrictHostKeyChecking no
          if_key_exists: replace # replace / ignore / fail; optional (defaults to fail)

      - name: Run the playbook
        run: |
            cd bootstrap-instances
            cat > hosts <<-EOF
                [workshop_instances]
                129.114.16.211
                129.114.16.161
                129.114.16.172

                [workshop_instances:vars]
                ansible_user = ubuntu
                ansible_ssh_private_key_file = id_rsa.key
            EOF
            make all
        env:
            ANSIBLE_STDOUT_CALLBACK: yaml

      - name: Tear down infrastructure
        id: validate
        run: cd terraform-release && terraform destroy
